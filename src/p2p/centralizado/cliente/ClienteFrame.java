/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package p2p.centralizado.cliente;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Marquinhos
 */
public class ClienteFrame extends javax.swing.JFrame {

    /**
     * Creates new form ClienteFrame
     */
    Socket CServer;
    String obtainFileName;
    String obtainPeerID;
    DataOutputStream saida;
    DataInputStream entrada;
    String resposta;
    String pesquisaarquivo;
    String searchResults;
    String arqdire = "C:/Users/Marquinhos/Documents/NetBeansProjects/P2P-Centralizado/datacliente";
    int porta_servidorArquivo_usuario;

    public ClienteFrame() throws IOException {
        initComponents();

        CServer = new Socket("localhost", 5004);
        porta_servidorArquivo_usuario = gerarportaserverdownload(CServer);
        System.out.println(porta_servidorArquivo_usuario);
        
        
        Thread Tupload = new Thread(new Cliente_upload(arqdire, porta_servidorArquivo_usuario));
        Tupload.start();
        
        
        saida = new DataOutputStream(CServer.getOutputStream());
        entrada = new DataInputStream(CServer.getInputStream());
        
        
        Thread escuta = new Thread(new Escuta_conexoes(this));
        escuta.start();
        
        
        atualizarlistaservidor(saida, "1", porta_servidorArquivo_usuario, arqdire);
        numerocliente.setText(String.valueOf(CServer.getLocalPort()));

    }

    private void atualizarlistaservidor(DataOutputStream saida, String opcao, int usuarioinpport, String arqdire) throws IOException {
        saida.writeUTF(opcao);
        saida.writeUTF(String.valueOf(usuarioinpport));
        File diretorio = new File(arqdire);
        File[] arq_compartilhado = diretorio.listFiles();
        for (File arq_compartilhado1 : arq_compartilhado) {
            saida.writeUTF("MM");
            saida.writeUTF(arq_compartilhado1.getName());
            System.out.println(arq_compartilhado1.getName());
            System.out.println("MM");
        }
        saida.writeUTF("FF");
    }

    private int gerarportaserverdownload(Socket CServer) {
        Random random = new Random();
        int ret = random.nextInt(65350);
        if ((ret != 0) && (ret != CServer.getPort())) {
            return ret;
        } else {
            gerarportaserverdownload(CServer);
        }
        return 0;
    }

    private boolean baixar(String nomeArq, String porta_exter) throws IOException, InterruptedException {

        String pasta_download = arqdire;

        Socket peerClient = new Socket("localhost", Integer.parseInt(porta_exter));
        System.out.println("Baixando Arquivo ...");
        response.setText("Baixando Arquivo ...");

        DataInputStream in = new DataInputStream(peerClient.getInputStream());
        DataOutputStream out = new DataOutputStream(peerClient.getOutputStream());

        out.writeUTF(nomeArq);
        out.flush();
        out.writeUTF(porta_exter);
        long buffSize = in.readLong();
        int newBuffSize = (int) buffSize;

        byte[] b = new byte[newBuffSize];

        int numberofbytesread = in.read(b);

        try {
            FileOutputStream writeFileStream = new FileOutputStream(pasta_download + "/" + nomeArq);

            writeFileStream.write(b);

            writeFileStream.close();

            System.out.println("Baixado com Sucesso");
            response.setText("Baixado com Sucesso");

            return true;

        } catch (FileNotFoundException ex) {
            System.out.println("FileNotFoundException : " + ex);
            return false;
        } catch (IOException e) {
            e.printStackTrace();

        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        pesquisa = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        numerocliente = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        response = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Pesquisar Arquivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        pesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisaActionPerformed(evt);
            }
        });

        jLabel1.setText("Cliente: ");

        numerocliente.setEditable(false);
        numerocliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numeroclienteActionPerformed(evt);
            }
        });

        response.setEditable(false);
        response.setColumns(20);
        response.setRows(5);
        jScrollPane1.setViewportView(response);

        jButton2.setText("Baixar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sair");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pesquisa)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numerocliente, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(151, 151, 151)
                                .addComponent(jButton1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jButton2)
                .addGap(98, 98, 98)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numerocliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        response.setText("");
        if(!pesquisa.getText().isEmpty()){
        try {
            // TODO add your handling code here:
            saida.writeUTF("2");
            saida.flush();
            System.out.println("Nome do arquivo a ser procurado");
            pesquisaarquivo = pesquisa.getText();
            saida.writeUTF(pesquisaarquivo);

            Thread.sleep(500);

            searchResults = resposta;

            // System.out.println(searchResults);
            obtainFileName = pesquisaarquivo;
            obtainPeerID = searchResults;
            response.setText(obtainFileName + "  \n" + obtainPeerID + "\n");
        } catch (IOException ex) {
            //  Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        }else{response.setText("Campo pesquisa vazio");}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void pesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisaActionPerformed


    }//GEN-LAST:event_pesquisaActionPerformed

    private void numeroclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numeroclienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numeroclienteActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.out.println(obtainFileName);
        System.out.println(obtainPeerID);
        boolean retorno;
        if(obtainFileName!=null|| obtainPeerID!=null){
        try {
            retorno = baixar(obtainFileName, obtainPeerID);
            if (retorno == true) {
                atualizarlistaservidor(saida, "1", porta_servidorArquivo_usuario, arqdire);
            }
        } catch (IOException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        }else{
        response.setText("Nenhum arquivo pra baixar");}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.out.println("Conexão fechada .... !!!");
        try {
            saida.writeUTF("4");
            CServer.close();
            System.exit(0);
        } catch (IOException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new ClienteFrame().setVisible(true);
                } catch (IOException ex) {
                    //   Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField numerocliente;
    private javax.swing.JTextField pesquisa;
    private javax.swing.JTextArea response;
    // End of variables declaration//GEN-END:variables
}

class Escuta_conexoes implements Runnable {

    ClienteFrame aThis_aux;

    Escuta_conexoes(ClienteFrame aThis) {
        this.aThis_aux = aThis;
    }

    @Override
    public void run() {
        while (true) {

            try {

                String a;

                a = aThis_aux.entrada.readUTF();

                switch (a) {
                    case "TESTE":
                        while (a.equals("TESTE")) {
                            a = aThis_aux.entrada.readUTF();
                        }

                        aThis_aux.resposta = a;
                        break;
                }
            } catch (IOException ex) {
                Thread.currentThread().stop();
            }
            //Mostra a contagem.

            // }
        }
    }
}
